{
    "openapi": "3.0.1",
    "info": {
        "title": "Xpanse API",
        "description": "RESTful Services to interact with Xpanse runtime",
        "version": "1.0.8-SNAPSHOT"
    },
    "servers": [{ "url": "http://localhost:8080", "description": "Generated server url" }],
    "security": [
        { "OAuth2Flow": ["openid", "profile", "urn:zitadel:iam:org:project:roles", "urn:zitadel:iam:user:metadata"] }
    ],
    "tags": [
        { "name": "Webhook", "description": "Webhook APIs" },
        { "name": "Auth Management", "description": "APIs for user authentication and authorization." },
        { "name": "Credentials Configuration", "description": "APIs Viewing Cloud Credentials Configuration" },
        { "name": "Service Policies Management", "description": "APIs for managing service's infra policies." },
        { "name": "Service", "description": "APIs to manage the service instances" },
        { "name": "Service Status Management", "description": "APIs to manage the service instances" },
        { "name": "Migration", "description": "APIs to manage the service migration." },
        { "name": "Service Vendor", "description": "APIs to manage service templates." },
        { "name": "Admin", "description": "APIs for administrating Xpanse" },
        {
            "name": "ISV Cloud Credentials Management",
            "description": "APIs for managing isv's cloud provider credentials"
        },
        { "name": "Workflow", "description": "APIs to manage the Workflow" },
        {
            "name": "User Cloud Credentials Management",
            "description": "APIs for managing user's cloud provider credentials"
        },
        {
            "name": "Service Catalog",
            "description": "APIs to query the services which are available for the user to order."
        },
        {
            "name": "Cloud Service Provider",
            "description": "APIs for cloud service provider to manage service templates."
        },
        { "name": "Cloud Resources", "description": "API to view cloud resources by type" },
        { "name": "User Policies Management", "description": "APIs for managing user's infra policies." },
        { "name": "Monitor", "description": "APIs for getting metrics of deployed services." }
    ],
    "paths": {
        "/xpanse/workflow/task/{id}": {
            "put": {
                "tags": ["Workflow"],
                "description": "Complete tasks by task ID and set global process variables .<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "completeTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the workflow task that needs to be handled",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": { "type": "object", "additionalProperties": { "type": "object" } }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": { "description": "OK" }
                }
            }
        },
        "/xpanse/workflow/task/{id}/{retryOrder}": {
            "put": {
                "tags": ["Workflow"],
                "description": "Manage failed task orders.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "manageFailedOrder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the workflow task that needs to be handled",
                        "required": true,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "retryOrder",
                        "in": "path",
                        "description": "Controls if the order must be retried again or simply closed.",
                        "required": true,
                        "schema": { "type": "boolean" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": { "description": "OK" }
                }
            }
        },
        "/xpanse/user/credentials": {
            "get": {
                "tags": ["User Cloud Credentials Management"],
                "description": "List all cloud provider credentials added by the user for a cloud service provider.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getUserCloudCredentials",
                "parameters": [
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "The cloud service provider.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of credential.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/AbstractCredentialInfo" }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["User Cloud Credentials Management"],
                "description": "Update user's credential for connecting to the cloud service provider.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "updateUserCloudCredential",
                "requestBody": {
                    "content": {
                        "application/json": { "schema": { "$ref": "#/components/schemas/CreateCredential" } }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "204": { "description": "No Content" }
                }
            },
            "post": {
                "tags": ["User Cloud Credentials Management"],
                "description": "Add user's credential for connecting to the cloud service provider.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "addUserCloudCredential",
                "requestBody": {
                    "content": {
                        "application/json": { "schema": { "$ref": "#/components/schemas/CreateCredential" } }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "204": { "description": "No Content" }
                }
            },
            "delete": {
                "tags": ["User Cloud Credentials Management"],
                "description": "Delete user's credential for connecting to the cloud service provider.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "deleteUserCloudCredential",
                "parameters": [
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "The cloud service provider.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of credential.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The name of of credential.",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "204": { "description": "No Content" }
                }
            }
        },
        "/xpanse/services/stop/{id}": {
            "put": {
                "tags": ["Service Status Management"],
                "description": "Start a task to deploy service using registered service template.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "stopService",
                "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/DeployedService" } }
                        }
                    }
                }
            }
        },
        "/xpanse/services/start/{id}": {
            "put": {
                "tags": ["Service Status Management"],
                "description": "Start the service by the service id.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "startService",
                "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/DeployedService" } }
                        }
                    }
                }
            }
        },
        "/xpanse/services/restart/{id}": {
            "put": {
                "tags": ["Service Status Management"],
                "description": "Start a task to deploy service using registered service template.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "restartService",
                "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/DeployedService" } }
                        }
                    }
                }
            }
        },
        "/xpanse/service_templates/{id}": {
            "get": {
                "tags": ["Service Vendor"],
                "description": "Get service template using id.<br>Required role:<b> admin</b> or <b>isv</b>",
                "operationId": "details",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of service template",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/ServiceTemplateDetailVo" } }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Service Vendor"],
                "description": "Update service template using id and ocl model.<br>Required role:<b> admin</b> or <b>isv</b>",
                "operationId": "update",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of service template",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-yaml": { "schema": { "$ref": "#/components/schemas/Ocl" } },
                        "application/yml": { "schema": { "$ref": "#/components/schemas/Ocl" } },
                        "application/yaml": { "schema": { "$ref": "#/components/schemas/Ocl" } }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/ServiceTemplateDetailVo" } }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Service Vendor"],
                "description": "Delete service template using id.<br>Required role:<b> admin</b> or <b>isv</b>",
                "operationId": "unregister",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of service template",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    }
                }
            }
        },
        "/xpanse/service_templates/file/{id}": {
            "put": {
                "tags": ["Service Vendor"],
                "description": "Update service template using id and URL of Ocl file.<br>Required role:<b> admin</b> or <b>isv</b>",
                "operationId": "fetchUpdate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of service template",
                        "required": true,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "oclLocation",
                        "in": "query",
                        "description": "URL of Ocl file",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/ServiceTemplateDetailVo" } }
                        }
                    }
                }
            }
        },
        "/xpanse/service/policies": {
            "get": {
                "tags": ["Service Policies Management"],
                "description": "List the policies belongs to the service.<br>Required role:<b> admin</b> or <b>isv</b>",
                "operationId": "listServicePolicies",
                "parameters": [
                    {
                        "name": "serviceTemplateId",
                        "in": "query",
                        "description": "The id of registered service template which the policy belongs to.",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ServicePolicy" } }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Service Policies Management"],
                "description": "Update the policy belongs to the registered service template.<br>Required role:<b> admin</b> or <b>isv</b>",
                "operationId": "updateServicePolicy",
                "requestBody": {
                    "content": {
                        "application/json": { "schema": { "$ref": "#/components/schemas/ServicePolicyUpdateRequest" } }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/ServicePolicy" } }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Service Policies Management"],
                "description": "Add policy for the registered service template.<br>Required role:<b> admin</b> or <b>isv</b>",
                "operationId": "addServicePolicy",
                "requestBody": {
                    "content": {
                        "application/json": { "schema": { "$ref": "#/components/schemas/ServicePolicyCreateRequest" } }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/ServicePolicy" } }
                        }
                    }
                }
            }
        },
        "/xpanse/policies": {
            "get": {
                "tags": ["User Policies Management"],
                "description": "List the policies defined by the user.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "listUserPolicies",
                "parameters": [
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "Name of csp which the policy belongs to.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "description": "Is the policy enabled.",
                        "required": false,
                        "schema": { "type": "boolean" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/UserPolicy" } }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["User Policies Management"],
                "description": "Update the policy created by the user.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "updateUserPolicy",
                "requestBody": {
                    "content": {
                        "application/json": { "schema": { "$ref": "#/components/schemas/UserPolicyUpdateRequest" } }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserPolicy" } } }
                    }
                }
            },
            "post": {
                "tags": ["User Policies Management"],
                "description": "Add policy created by the user.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "addUserPolicy",
                "requestBody": {
                    "content": {
                        "application/json": { "schema": { "$ref": "#/components/schemas/UserPolicyCreateRequest" } }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserPolicy" } } }
                    }
                }
            }
        },
        "/xpanse/isv/credentials": {
            "get": {
                "tags": ["ISV Cloud Credentials Management"],
                "description": "Users in the ISV role get all cloud provider credentials added by the user for a cloud service provider.<br>Required role:<b> isv</b>",
                "operationId": "getIsvCloudCredentials",
                "parameters": [
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "The cloud service provider.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of credential.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/AbstractCredentialInfo" }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["ISV Cloud Credentials Management"],
                "description": "Update the user credentials used for ISV to connect to the cloud service provider.<br>Required role:<b> isv</b>",
                "operationId": "updateIsvCloudCredential",
                "requestBody": {
                    "content": {
                        "application/json": { "schema": { "$ref": "#/components/schemas/CreateCredential" } }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "204": { "description": "No Content" }
                }
            },
            "post": {
                "tags": ["ISV Cloud Credentials Management"],
                "description": "Add the user credentials for the ISV role used to connect to the cloud service provider.<br>Required role:<b> isv</b>",
                "operationId": "addIsvCloudCredential",
                "requestBody": {
                    "content": {
                        "application/json": { "schema": { "$ref": "#/components/schemas/CreateCredential" } }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "204": { "description": "No Content" }
                }
            },
            "delete": {
                "tags": ["ISV Cloud Credentials Management"],
                "description": "Delete the credentials of the user in the USER role to connect to the cloud service provider.<br>Required role:<b> isv</b>",
                "operationId": "deleteIsvCloudCredential",
                "parameters": [
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "The cloud service provider.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of credential.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The name of of credential.",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "204": { "description": "No Content" }
                }
            }
        },
        "/xpanse/services": {
            "get": {
                "tags": ["Service"],
                "description": "List all deployed services by a user.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "listDeployedServices",
                "parameters": [
                    {
                        "name": "categoryName",
                        "in": "query",
                        "description": "category of the service",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ai",
                                "compute",
                                "container",
                                "storage",
                                "network",
                                "database",
                                "mediaService",
                                "security",
                                "middleware",
                                "others"
                            ]
                        }
                    },
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "name of the cloud service provider",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    },
                    {
                        "name": "serviceName",
                        "in": "query",
                        "description": "name of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceVersion",
                        "in": "query",
                        "description": "version of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceState",
                        "in": "query",
                        "description": "deployment state of the service",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "deploying",
                                "deployment successful",
                                "deployment failed",
                                "destroying",
                                "destroy successful",
                                "destroy failed",
                                "migrating",
                                "migration successful",
                                "migration failed",
                                "manual cleanup required",
                                "rollback failed"
                            ]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/DeployedService" }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Service"],
                "description": "Start a task to deploy service using registered service template.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "deploy",
                "requestBody": {
                    "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DeployRequest" } } },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": { "application/json": { "schema": { "type": "string", "format": "uuid" } } }
                    }
                }
            }
        },
        "/xpanse/services/migration": {
            "post": {
                "tags": ["Migration"],
                "description": "Create a job to migrate the deployed service.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "migrate",
                "requestBody": {
                    "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MigrateRequest" } } },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": { "application/json": { "schema": { "type": "string", "format": "uuid" } } }
                    }
                }
            }
        },
        "/xpanse/service_templates": {
            "get": {
                "tags": ["Service Vendor"],
                "description": "List service templates with query params.<br>Required role:<b> admin</b> or <b>isv</b>",
                "operationId": "listServiceTemplates",
                "parameters": [
                    {
                        "name": "categoryName",
                        "in": "query",
                        "description": "category of the service",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ai",
                                "compute",
                                "container",
                                "storage",
                                "network",
                                "database",
                                "mediaService",
                                "security",
                                "middleware",
                                "others"
                            ]
                        }
                    },
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "name of the cloud service provider",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    },
                    {
                        "name": "serviceName",
                        "in": "query",
                        "description": "name of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceVersion",
                        "in": "query",
                        "description": "version of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceHostingType",
                        "in": "query",
                        "description": "who hosts ths cloud resources",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines which cloud service account is used for deploying cloud resources.",
                            "enum": ["self", "service-vendor"]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/ServiceTemplateDetailVo" }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Service Vendor"],
                "description": "Register new service template using ocl model.<br>Required role:<b> admin</b> or <b>isv</b>",
                "operationId": "register",
                "requestBody": {
                    "content": {
                        "application/x-yaml": { "schema": { "$ref": "#/components/schemas/Ocl" } },
                        "application/yml": { "schema": { "$ref": "#/components/schemas/Ocl" } },
                        "application/yaml": { "schema": { "$ref": "#/components/schemas/Ocl" } }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/ServiceTemplateDetailVo" } }
                        }
                    }
                }
            }
        },
        "/xpanse/service_templates/file": {
            "post": {
                "tags": ["Service Vendor"],
                "description": "Register new service template using URL of Ocl file.<br>Required role:<b> admin</b> or <b>isv</b>",
                "operationId": "fetch",
                "parameters": [
                    {
                        "name": "oclLocation",
                        "in": "query",
                        "description": "URL of Ocl file",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/ServiceTemplateDetailVo" } }
                        }
                    }
                }
            }
        },
        "/webhook/tofu-maker/destroy/{task_id}": {
            "post": {
                "tags": ["Webhook"],
                "description": "Process the execution result after openTofu executes the command line.",
                "operationId": "destroyCallback",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "description": "task id",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "requestBody": {
                    "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OpenTofuResult" } } },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": { "description": "OK" }
                }
            }
        },
        "/webhook/tofu-maker/deploy/{task_id}": {
            "post": {
                "tags": ["Webhook"],
                "description": "Process the execution result after openTofu executes the command line.",
                "operationId": "deployCallback",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "description": "task id",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "requestBody": {
                    "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OpenTofuResult" } } },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": { "description": "OK" }
                }
            }
        },
        "/webhook/terraform-boot/destroy/{task_id}": {
            "post": {
                "tags": ["Webhook"],
                "description": "Process the execution result after terraform executes the command line.",
                "operationId": "destroyCallback_1",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "description": "task id",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "requestBody": {
                    "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TerraformResult" } } },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": { "description": "OK" }
                }
            }
        },
        "/webhook/terraform-boot/deploy/{task_id}": {
            "post": {
                "tags": ["Webhook"],
                "description": "Process the execution result after terraform executes the command line.",
                "operationId": "deployCallback_1",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "description": "task id",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "requestBody": {
                    "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TerraformResult" } } },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": { "description": "OK" }
                }
            }
        },
        "/xpanse/workflow/tasks": {
            "get": {
                "tags": ["Workflow"],
                "description": "Query all tasks of the given user<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "queryTasks",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "the status of task",
                        "required": false,
                        "schema": { "type": "string", "enum": ["done", "failed"] }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkFlowTask" } }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/services/migrations": {
            "get": {
                "tags": ["Migration"],
                "description": "List all services migration by a user.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "listServiceMigrations",
                "parameters": [
                    {
                        "name": "migrationId",
                        "in": "query",
                        "description": "Id of the service migrate",
                        "required": false,
                        "schema": { "type": "string", "format": "uuid" }
                    },
                    {
                        "name": "newServiceId",
                        "in": "query",
                        "description": "Id of the new service",
                        "required": false,
                        "schema": { "type": "string", "format": "uuid" }
                    },
                    {
                        "name": "oldServiceId",
                        "in": "query",
                        "description": "Id of the old service",
                        "required": false,
                        "schema": { "type": "string", "format": "uuid" }
                    },
                    {
                        "name": "migrationStatus",
                        "in": "query",
                        "description": "Status of the service migrate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MigrationStarted",
                                "MigrationCompleted",
                                "MigrationFailed",
                                "DataExportStarted",
                                "DataExportFailed",
                                "DataExportCompleted",
                                "DeployStarted",
                                "DeployFailed",
                                "DeployCompleted",
                                "DataImportStarted",
                                "DataImportFailed",
                                "DataImportCompleted",
                                "DestroyStarted",
                                "DestroyFailed",
                                "DestroyCompleted"
                            ]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/ServiceMigrationDetails" }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/services/migration/{migrationId}": {
            "get": {
                "tags": ["Migration"],
                "description": "Get migration records based on migration id.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getMigrationOrderDetailsById",
                "parameters": [
                    {
                        "name": "migrationId",
                        "in": "path",
                        "description": "Migration ID",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/ServiceMigrationDetails" } }
                        }
                    }
                }
            }
        },
        "/xpanse/services/isv": {
            "get": {
                "tags": ["Service"],
                "description": "List all deployed services by a user.<br>Required role:<b> isv</b>",
                "operationId": "listDeployedServicesOfIsv",
                "parameters": [
                    {
                        "name": "categoryName",
                        "in": "query",
                        "description": "category of the service",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ai",
                                "compute",
                                "container",
                                "storage",
                                "network",
                                "database",
                                "mediaService",
                                "security",
                                "middleware",
                                "others"
                            ]
                        }
                    },
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "name of the cloud service provider",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    },
                    {
                        "name": "serviceName",
                        "in": "query",
                        "description": "name of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceVersion",
                        "in": "query",
                        "description": "version of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceState",
                        "in": "query",
                        "description": "deployment state of the service",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "deploying",
                                "deployment successful",
                                "deployment failed",
                                "destroying",
                                "destroy successful",
                                "destroy failed",
                                "migrating",
                                "migration successful",
                                "migration failed",
                                "manual cleanup required",
                                "rollback failed"
                            ]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/DeployedService" }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/services/isv/details/vendor_hosted/{id}": {
            "get": {
                "tags": ["Service"],
                "description": "Get deployed service details by id.<br>Required role:<b> isv</b>",
                "operationId": "getServiceDetailsByIdForIsv",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task id of deployed service",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/DeployedServiceDetails" } }
                        }
                    }
                }
            }
        },
        "/xpanse/services/details": {
            "get": {
                "tags": ["Service"],
                "description": "List all deployed services details.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "listDeployedServicesDetails",
                "parameters": [
                    {
                        "name": "categoryName",
                        "in": "query",
                        "description": "category of the service",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ai",
                                "compute",
                                "container",
                                "storage",
                                "network",
                                "database",
                                "mediaService",
                                "security",
                                "middleware",
                                "others"
                            ]
                        }
                    },
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "name of the cloud service provider",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    },
                    {
                        "name": "serviceName",
                        "in": "query",
                        "description": "name of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceVersion",
                        "in": "query",
                        "description": "version of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceState",
                        "in": "query",
                        "description": "deployment state of the service",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "deploying",
                                "deployment successful",
                                "deployment failed",
                                "destroying",
                                "destroy successful",
                                "destroy failed",
                                "migrating",
                                "migration successful",
                                "migration failed",
                                "manual cleanup required",
                                "rollback failed"
                            ]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/DeployedService" }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/services/details/vendor_hosted/{id}": {
            "get": {
                "tags": ["Service"],
                "description": "Get deployed service details by id.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getVendorHostedServiceDetailsById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task id of deployed service",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": { "$ref": "#/components/schemas/VendorHostedDeployedServiceDetails" }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/services/details/self_hosted/{id}": {
            "get": {
                "tags": ["Service"],
                "description": "Get deployed service details by id.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getSelfHostedServiceDetailsById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task id of deployed service",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/DeployedServiceDetails" } }
                        }
                    }
                }
            }
        },
        "/xpanse/service_templates/all": {
            "get": {
                "tags": ["Cloud Service Provider"],
                "description": "List all service templates with query params.<br>Required role:<b> admin</b> or <b>csp</b>",
                "operationId": "listAllServiceTemplates",
                "parameters": [
                    {
                        "name": "categoryName",
                        "in": "query",
                        "description": "category of the service",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ai",
                                "compute",
                                "container",
                                "storage",
                                "network",
                                "database",
                                "mediaService",
                                "security",
                                "middleware",
                                "others"
                            ]
                        }
                    },
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "name of the cloud service provider",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    },
                    {
                        "name": "serviceName",
                        "in": "query",
                        "description": "name of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceVersion",
                        "in": "query",
                        "description": "version of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceHostingType",
                        "in": "query",
                        "description": "who hosts ths cloud resources",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines which cloud service account is used for deploying cloud resources.",
                            "enum": ["self", "service-vendor"]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/ServiceTemplateDetailVo" }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/service/policies/{id}": {
            "get": {
                "tags": ["Service Policies Management"],
                "description": "Get details of policy belongs to the registered service template.<br>Required role:<b> admin</b> or <b>isv</b>",
                "operationId": "getServicePolicyDetails",
                "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/ServicePolicy" } }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Service Policies Management"],
                "description": "Delete the policy belongs to the registered service template.<br>Required role:<b> admin</b> or <b>isv</b>",
                "operationId": "deleteServicePolicy",
                "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "204": { "description": "No Content" }
                }
            }
        },
        "/xpanse/policies/{id}": {
            "get": {
                "tags": ["User Policies Management"],
                "description": "Get the details of the policy created by the user.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getPolicyDetails",
                "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserPolicy" } } }
                    }
                }
            },
            "delete": {
                "tags": ["User Policies Management"],
                "description": "Delete the policy created by the user.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "deleteUserPolicy",
                "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "204": { "description": "No Content" }
                }
            }
        },
        "/xpanse/metrics": {
            "get": {
                "tags": ["Monitor"],
                "description": "Get metrics of a deployed service or a resource.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getMetrics",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "query",
                        "description": "Id of the deployed service",
                        "required": true,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "resourceId",
                        "in": "query",
                        "description": "Id of resource in the deployed service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "monitorResourceType",
                        "in": "query",
                        "description": "Types of the monitor resource.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["cpu", "mem", "vm_network_incoming", "vm_network_outgoing"]
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Start UNIX timestamp in milliseconds. If no value filled,the default value is the UNIX timestamp in milliseconds of the five minutes ago.",
                        "required": false,
                        "schema": { "minimum": 0, "type": "integer", "format": "int64" }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "End UNIX timestamp in milliseconds. If no value filled,the default value is the UNIX timestamp in milliseconds of the current time.",
                        "required": false,
                        "schema": { "minimum": 0, "type": "integer", "format": "int64" }
                    },
                    {
                        "name": "granularity",
                        "in": "query",
                        "description": "Return metrics collected in provided time interval. This depends on how the source systems have generated/collected metrics.",
                        "required": false,
                        "schema": { "type": "integer", "format": "int32" }
                    },
                    {
                        "name": "onlyLastKnownMetric",
                        "in": "query",
                        "description": "Returns only the last known metric. When this parameter is set then all other query parameters are ignored.",
                        "required": false,
                        "schema": { "type": "boolean", "default": false }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Metric" } }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/health": {
            "get": {
                "tags": ["Admin"],
                "description": "Check health of API service and backend systems.<br>Required role:<b> admin</b> or <b>isv</b> or <b>user</b>",
                "operationId": "healthCheck",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SystemStatus" } } }
                    }
                }
            }
        },
        "/xpanse/csp": {
            "get": {
                "tags": ["Admin"],
                "description": "List cloud service provider.<br>Required role:<b> admin</b> or <b>isv</b> or <b>user</b>",
                "operationId": "getCsps",
                "parameters": [
                    {
                        "name": "active",
                        "in": "query",
                        "description": "Whether only list cloud service provider with active plugin.",
                        "required": true,
                        "schema": { "type": "boolean" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "huawei",
                                            "flexibleEngine",
                                            "openstack",
                                            "scs",
                                            "alicloud",
                                            "aws",
                                            "azure",
                                            "google"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/csp/resources/{deployResourceKind}": {
            "get": {
                "tags": ["Cloud Resources"],
                "description": "List existing cloud resource types<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getExistingResourcesOfType",
                "parameters": [
                    {
                        "name": "csp",
                        "in": "query",
                        "description": "name of the cloud service provider",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    },
                    {
                        "name": "region",
                        "in": "query",
                        "description": "name of he region",
                        "required": true,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "deployResourceKind",
                        "in": "path",
                        "description": "kind of the CloudResource",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "vm",
                                "container",
                                "publicIP",
                                "vpc",
                                "volume",
                                "unknown",
                                "security_group",
                                "security_group_rule",
                                "keypair",
                                "subnet"
                            ]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "type": "array", "items": { "type": "string" } } }
                        }
                    }
                }
            }
        },
        "/xpanse/credentials/openapi/{csp}/{type}": {
            "get": {
                "tags": ["Credentials Configuration"],
                "description": "Returns the OpenAPI document for adding a credential.<br>Required role:<b> isv</b> or <b>admin</b> or <b>user</b>",
                "operationId": "getCredentialOpenApi",
                "parameters": [
                    {
                        "name": "csp",
                        "in": "path",
                        "description": "The cloud service provider.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of credential.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Link" } } }
                    }
                }
            }
        },
        "/xpanse/credentials/capabilities": {
            "get": {
                "tags": ["Credentials Configuration"],
                "description": "List the credential capabilities defined by the cloud service provider.<br>Required role:<b> isv</b> or <b>admin</b> or <b>user</b>",
                "operationId": "getCredentialCapabilities",
                "parameters": [
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "name of the cloud service provider.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of credential.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The name of credential.",
                        "required": false,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/AbstractCredentialInfo" }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/credential_types": {
            "get": {
                "tags": ["Credentials Configuration"],
                "description": "List the credential types supported by the cloud service provider.<br>Required role:<b> isv</b> or <b>admin</b> or <b>user</b>",
                "operationId": "getCredentialTypes",
                "parameters": [
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "The cloud service provider.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/catalog/services": {
            "get": {
                "tags": ["Service Catalog"],
                "description": "List of all registered services which are available for user to order.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "listOrderableServices",
                "parameters": [
                    {
                        "name": "categoryName",
                        "in": "query",
                        "description": "category of the service",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ai",
                                "compute",
                                "container",
                                "storage",
                                "network",
                                "database",
                                "mediaService",
                                "security",
                                "middleware",
                                "others"
                            ]
                        }
                    },
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "name of the cloud service provider",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "huawei",
                                "flexibleEngine",
                                "openstack",
                                "scs",
                                "alicloud",
                                "aws",
                                "azure",
                                "google"
                            ]
                        }
                    },
                    {
                        "name": "serviceName",
                        "in": "query",
                        "description": "name of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceVersion",
                        "in": "query",
                        "description": "version of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceHostingType",
                        "in": "query",
                        "description": "who hosts ths cloud resources",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines which cloud service account is used for deploying cloud resources.",
                            "enum": ["self", "service-vendor"]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/UserOrderableServiceVo" }
                                }
                            },
                            "application/hal+json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/UserOrderableServiceVo" }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/catalog/services/{id}": {
            "get": {
                "tags": ["Service Catalog"],
                "description": "Get deployable service by id.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getOrderableServiceDetails",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of orderable service.",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/UserOrderableServiceVo" } }
                        }
                    }
                }
            }
        },
        "/xpanse/catalog/services/{id}/openapi": {
            "get": {
                "tags": ["Service Catalog"],
                "description": "Get the API document of the orderable service.<br>Required role:<b> admin</b> or <b>isv</b> or <b>user</b>",
                "operationId": "openApi",
                "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Link" } } }
                    }
                }
            }
        },
        "/auth/token": {
            "get": {
                "tags": ["Auth Management"],
                "description": "Get token info by authorization code.",
                "operationId": "getAccessToken",
                "parameters": [
                    {
                        "name": "code",
                        "in": "query",
                        "description": "The authorization code.",
                        "required": true,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Opaque value used to maintain state.",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/TokenResponse" } }
                        }
                    }
                }
            }
        },
        "/auth/authorize": {
            "get": {
                "tags": ["Auth Management"],
                "description": "Get and redirect authorization url for user to authenticate.",
                "operationId": "authorize",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": { "description": "OK" }
                }
            }
        },
        "/xpanse/services/{id}": {
            "delete": {
                "tags": ["Service"],
                "description": "Start a task to destroy the deployed service using id.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "destroy",
                "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    }
                }
            }
        },
        "/xpanse/services/purge/{id}": {
            "delete": {
                "tags": ["Service"],
                "description": "Start a task to purge the deployed service using id.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "purge",
                "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Response": {
                "required": ["details", "resultType", "success"],
                "type": "object",
                "properties": {
                    "resultType": {
                        "type": "string",
                        "description": "The result code of response.",
                        "enum": [
                            "Success",
                            "Runtime Error",
                            "Parameters Invalid",
                            "Terraform Script Invalid",
                            "Unprocessable Entity",
                            "Response Not Valid",
                            "Failure while connecting to backend",
                            "Credential Capability Not Found",
                            "Credentials Not Found",
                            "Credential Variables Not Complete",
                            "Flavor Invalid",
                            "Terraform Execution Failed",
                            "Plugin Not Found",
                            "Deployer Not Found",
                            "Terraform Provider Not Found",
                            "No Credential Definition Available",
                            "Invalid Service State",
                            "Resource Invalid For Monitoring",
                            "Unhandled Exception",
                            "Service Template Already Registered",
                            "Icon Processing Failed",
                            "Service Template Not Registered",
                            "Service Deployment Not Found",
                            "Resource Not Found",
                            "Deployment Variable Invalid",
                            "Service Template Update Not Allowed",
                            "Unauthorized",
                            "Access Denied",
                            "Sensitive Field Encryption Or Decryption Failed Exception",
                            "Unsupported Enum Value",
                            "Terraform Boot Request Failed",
                            "Tofu Maker Request Failed",
                            "Metrics Data Not Ready",
                            "Variable Validation Failed",
                            "Variable Schema Definition Invalid",
                            "Policy Not Found",
                            "Duplicate Policy",
                            "Policy Validation Failed",
                            "Policy Evaluation Failed",
                            "Current Login User No Found",
                            "Service Details No Accessible",
                            "Migrating activiti Task Not Found",
                            "Service Migration Failed Exception",
                            "Invalid Git Repo Details"
                        ]
                    },
                    "details": {
                        "type": "array",
                        "description": "Details of the errors occurred",
                        "items": { "type": "string", "description": "Details of the errors occurred" }
                    },
                    "success": { "type": "boolean", "description": "Describes if the request is successful" }
                }
            },
            "CreateCredential": {
                "required": ["csp", "name", "timeToLive", "type", "variables"],
                "type": "object",
                "properties": {
                    "name": { "type": "string", "description": "The name of the credential" },
                    "csp": {
                        "type": "string",
                        "description": "The cloud service provider of the credential.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "scs", "alicloud", "aws", "azure", "google"]
                    },
                    "description": { "type": "string", "description": "The description of the credential" },
                    "type": {
                        "type": "string",
                        "description": "The type of the credential",
                        "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                    },
                    "variables": {
                        "type": "array",
                        "description": "The variables list of the credential",
                        "items": { "$ref": "#/components/schemas/CredentialVariable" }
                    },
                    "timeToLive": {
                        "type": "integer",
                        "description": "The time in seconds to live of the credential",
                        "format": "int32",
                        "default": 3600
                    }
                }
            },
            "CredentialVariable": {
                "required": ["description", "isSensitive", "name", "value"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the CredentialVariable,this field is provided by the plugin of cloud service provider."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the CredentialVariable,this field is provided by the plugin of cloud service provider."
                    },
                    "isMandatory": {
                        "type": "boolean",
                        "description": "If the variable is mandatory. If is optional then the credential completeness check will ignore this variable. It is upto the plugin to decide what needs to be done if this optional credential variable is present.",
                        "default": true
                    },
                    "isSensitive": {
                        "type": "boolean",
                        "description": "Defines if the particular variable contains sensitive data. For example the value is false for username and true for password variables respectively."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the CredentialVariable, this field is filled by the user."
                    }
                },
                "description": "The variables list of the credential"
            },
            "DeployedService": {
                "required": [
                    "category",
                    "createTime",
                    "csp",
                    "id",
                    "lastModifiedTime",
                    "name",
                    "serviceDeploymentState",
                    "serviceHostingType",
                    "serviceState",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "id": { "type": "string", "description": "The ID of the service", "format": "uuid" },
                    "category": {
                        "type": "string",
                        "description": "The catalog of the service",
                        "enum": [
                            "ai",
                            "compute",
                            "container",
                            "storage",
                            "network",
                            "database",
                            "mediaService",
                            "security",
                            "middleware",
                            "others"
                        ]
                    },
                    "name": { "type": "string", "description": "The name of the service" },
                    "customerServiceName": {
                        "type": "string",
                        "description": "Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated"
                    },
                    "version": { "type": "string", "description": "The version of the service" },
                    "csp": {
                        "type": "string",
                        "description": "The provider of the service",
                        "enum": ["huawei", "flexibleEngine", "openstack", "scs", "alicloud", "aws", "azure", "google"]
                    },
                    "flavor": { "type": "string", "description": "The flavor of the service" },
                    "serviceTemplateId": {
                        "type": "string",
                        "description": "The id of the Service Template",
                        "format": "uuid"
                    },
                    "serviceDeploymentState": {
                        "type": "string",
                        "description": "The deployment state of the service",
                        "enum": [
                            "deploying",
                            "deployment successful",
                            "deployment failed",
                            "destroying",
                            "destroy successful",
                            "destroy failed",
                            "migrating",
                            "migration successful",
                            "migration failed",
                            "manual cleanup required",
                            "rollback failed"
                        ]
                    },
                    "serviceState": {
                        "type": "string",
                        "description": "The run state of the service",
                        "enum": [
                            "not running",
                            "running",
                            "starting",
                            "starting failed",
                            "stopping",
                            "stopped",
                            "stopping failed"
                        ]
                    },
                    "serviceHostingType": {
                        "type": "string",
                        "description": "Defines which cloud service account is used for deploying cloud resources.",
                        "enum": ["self", "service-vendor"]
                    },
                    "createTime": {
                        "type": "string",
                        "description": "Time of register service.",
                        "format": "date-time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Time of update service.",
                        "format": "date-time"
                    },
                    "lastStartedAt": {
                        "type": "string",
                        "description": "Time of start service.",
                        "format": "date-time"
                    },
                    "lastStoppedAt": { "type": "string", "description": "Time of stop service.", "format": "date-time" }
                }
            },
            "Billing": {
                "required": ["currency", "model", "period"],
                "type": "object",
                "properties": {
                    "model": { "type": "string", "description": "The business model of the managed service" },
                    "period": {
                        "type": "string",
                        "description": "The rental period of the managed service",
                        "enum": ["daily", "weekly", "monthly", "quarterly", "yearly"]
                    },
                    "currency": {
                        "type": "string",
                        "description": "The billing currency of the managed service, valid values: euro,uso",
                        "enum": ["usd", "euro", "gbp", "cad", "dem", "frf", "cny"]
                    }
                },
                "description": "The billing policy of the managed service"
            },
            "CloudServiceProvider": {
                "required": ["name", "regions"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Cloud Service Provider.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "scs", "alicloud", "aws", "azure", "google"]
                    },
                    "regions": {
                        "type": "array",
                        "description": "The regions of the Cloud Service Provider",
                        "items": { "$ref": "#/components/schemas/Region" }
                    }
                },
                "description": "The cloud service provider of the managed service"
            },
            "DeployVariable": {
                "required": ["dataType", "description", "kind", "mandatory", "name"],
                "type": "object",
                "properties": {
                    "name": { "type": "string", "description": "The name of the deploy variable" },
                    "kind": { "$ref": "#/components/schemas/DeployVariableKind" },
                    "dataType": {
                        "type": "string",
                        "description": "The type of the deploy variable",
                        "enum": ["string", "number", "boolean"]
                    },
                    "example": { "type": "string", "description": "The example value of the deploy variable" },
                    "description": { "type": "string", "description": "The description of the deploy variable" },
                    "value": {
                        "type": "string",
                        "description": "The value of the deploy variable. Value can be provided for default variables"
                    },
                    "mandatory": { "type": "boolean", "description": "Indicates if the variable is mandatory" },
                    "valueSchema": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "valueSchema of the variable. The key be any keyword that is part of the JSON schema definition which can be found here https://json-schema.org/draft/2020-12/schema"
                    },
                    "sensitiveScope": {
                        "type": "string",
                        "description": "Sensitive scope of variable storage",
                        "enum": ["none", "once", "always"]
                    }
                },
                "description": "The variables for the deployment, which will be passed to the deployer"
            },
            "DeployVariableKind": {
                "type": "string",
                "description": "- `fix_env`: Values for variable of this type are defined by the managed service provider \nin the OCL template. Runtime will inject it to deployer as environment variables. \nThis variable is not visible to the end user.\n- `fix_variable`: Values for variable of this type are defined by the managed service \nprovider in the OCL template. Runtime will inject it to deployer as usual variables. \nThis variable is not visible to the end user.\n- `env`: Value for a variable of this type can be provided by end user. \nIf marked as mandatory then end user must provide value to this variable. \nIf marked as optional and if end user does not provide it, \nthen the fallback value to this variable is read by runtime (it can read from other sources,\n e.g., OS env variables). This variable is injected as an environment \n variable to the deployer.\n- `variable`: Value for a variable of this type can be provided by end user. \nIf marked as mandatory then end user must provide value to this variable. \nIf marked as optional and if end user does not provide it, \nthen the fallback value to this variable is read by runtime (it can read from other sources,\n e.g., OS env variables). This variable is injected as a regular variable to the deployer.\n- `env_env`: Value to this variable is read by runtime \n(it can read from other sources, e.g., OS env variables) \nand injected as an environment variable to the deployer. \nEnd user cannot see or change this variable.\n- `env_variable`: Value to this variable is read by runtime \n(it can read from other sources, e.g., OS env variables) \nand injected as a regular variable to the deployer. \nEnd user cannot see or change this variable.",
                "enum": ["fix_env", "fix_variable", "env", "variable", "env_env", "env_variable"]
            },
            "Deployment": {
                "required": ["kind", "variables"],
                "type": "object",
                "properties": {
                    "kind": {
                        "type": "string",
                        "description": "The type of the Deployer which will handle the service deployment",
                        "enum": ["terraform", "opentofu"]
                    },
                    "variables": {
                        "type": "array",
                        "description": "The variables for the deployment, which will be passed to the deployer",
                        "items": { "$ref": "#/components/schemas/DeployVariable" }
                    },
                    "credentialType": {
                        "type": "string",
                        "description": "The credential type to do the deployment",
                        "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                    },
                    "deployer": {
                        "type": "string",
                        "description": "The real deployer, something like terraform scripts. Either deployer or deployFromGitRepo must be provided."
                    },
                    "scriptsRepo": { "$ref": "#/components/schemas/ScriptsRepo" }
                },
                "description": "The deployment of the managed service"
            },
            "Flavor": {
                "required": ["fixedPrice", "name", "properties"],
                "type": "object",
                "properties": {
                    "name": { "type": "string", "description": "The flavor name" },
                    "fixedPrice": { "type": "integer", "description": "The price of the flavor", "format": "int32" },
                    "properties": {
                        "type": "object",
                        "additionalProperties": { "type": "string", "description": "The properties of the flavor" },
                        "description": "The properties of the flavor"
                    }
                },
                "description": "The flavors of the managed service"
            },
            "Ocl": {
                "required": [
                    "billing",
                    "category",
                    "cloudServiceProvider",
                    "deployment",
                    "description",
                    "flavors",
                    "icon",
                    "name",
                    "namespace",
                    "serviceHostingType",
                    "serviceProviderContactDetails",
                    "serviceVersion",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "The catalog of the service",
                        "enum": [
                            "ai",
                            "compute",
                            "container",
                            "storage",
                            "network",
                            "database",
                            "mediaService",
                            "security",
                            "middleware",
                            "others"
                        ]
                    },
                    "version": { "type": "string", "description": "The version of the Ocl" },
                    "name": { "type": "string", "description": "The name of the managed service" },
                    "serviceVersion": { "type": "string", "description": "The version of the managed service" },
                    "description": { "type": "string", "description": "The description of the managed service" },
                    "namespace": { "type": "string", "description": "The namespace of the managed service" },
                    "icon": { "type": "string", "description": "The icon of the managed service" },
                    "cloudServiceProvider": { "$ref": "#/components/schemas/CloudServiceProvider" },
                    "deployment": { "$ref": "#/components/schemas/Deployment" },
                    "flavors": {
                        "type": "array",
                        "description": "The flavors of the managed service",
                        "items": { "$ref": "#/components/schemas/Flavor" }
                    },
                    "billing": { "$ref": "#/components/schemas/Billing" },
                    "serviceHostingType": {
                        "type": "string",
                        "description": "Defines which cloud service account is used for deploying cloud resources.",
                        "enum": ["self", "service-vendor"]
                    },
                    "serviceProviderContactDetails": { "$ref": "#/components/schemas/ServiceProviderContactDetails" }
                }
            },
            "Region": {
                "required": ["area", "name"],
                "type": "object",
                "properties": {
                    "name": { "type": "string", "description": "The name of the Region" },
                    "area": {
                        "type": "string",
                        "description": "The area which the region belongs to, such as Asia, Europe, Africa"
                    }
                },
                "description": "The regions of the Cloud Service Provider"
            },
            "ScriptsRepo": {
                "required": ["branch", "repoUrl"],
                "type": "object",
                "properties": {
                    "repoUrl": { "type": "string", "description": "URL of the repo" },
                    "branch": { "type": "string", "description": "Branch to be checked out. Can be branch or a Tag" },
                    "scriptsPath": {
                        "type": "string",
                        "description": "Directory in the repo where scripts are present. If not provided, the root directory of the repo is considered"
                    }
                },
                "description": "Deployment scripts hosted on a GIT repo. Either deployer or deployFromGitRepo must be provided."
            },
            "ServiceProviderContactDetails": {
                "type": "object",
                "properties": {
                    "email": {
                        "maxItems": 2147483647,
                        "minItems": 1,
                        "type": "array",
                        "description": "The email details of the service provider.",
                        "items": { "type": "string", "description": "The email details of the service provider." }
                    },
                    "phone": {
                        "maxItems": 2147483647,
                        "minItems": 1,
                        "type": "array",
                        "description": "The phone details of the service provider.",
                        "items": { "type": "string", "description": "The phone details of the service provider." }
                    },
                    "chat": {
                        "maxItems": 2147483647,
                        "minItems": 1,
                        "type": "array",
                        "description": "The chat details of the service provider.",
                        "items": { "type": "string", "description": "The chat details of the service provider." }
                    },
                    "website": {
                        "maxItems": 2147483647,
                        "minItems": 1,
                        "type": "array",
                        "description": "The website details of the service provider.",
                        "items": { "type": "string", "description": "The website details of the service provider." }
                    }
                },
                "description": "The contact details of the service provider."
            },
            "Link": {
                "type": "object",
                "properties": {
                    "rel": { "type": "string" },
                    "href": { "type": "string" },
                    "hreflang": { "type": "string" },
                    "media": { "type": "string" },
                    "title": { "type": "string" },
                    "type": { "type": "string" },
                    "deprecation": { "type": "string" },
                    "profile": { "type": "string" },
                    "name": { "type": "string" }
                }
            },
            "ServiceTemplateDetailVo": {
                "required": [
                    "billing",
                    "category",
                    "createTime",
                    "csp",
                    "deployment",
                    "description",
                    "flavors",
                    "icon",
                    "id",
                    "lastModifiedTime",
                    "name",
                    "namespace",
                    "regions",
                    "serviceHostingType",
                    "serviceProviderContactDetails",
                    "serviceRegistrationState",
                    "variables",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "id": { "type": "string", "description": "ID of the registered service.", "format": "uuid" },
                    "name": { "type": "string", "description": "Name of the registered service." },
                    "version": { "type": "string", "description": "Version of the registered service." },
                    "csp": {
                        "type": "string",
                        "description": "Csp of the registered service.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "scs", "alicloud", "aws", "azure", "google"]
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of the registered service.",
                        "enum": [
                            "ai",
                            "compute",
                            "container",
                            "storage",
                            "network",
                            "database",
                            "mediaService",
                            "security",
                            "middleware",
                            "others"
                        ]
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Namespace of the user who registered service template."
                    },
                    "regions": {
                        "type": "array",
                        "description": "The regions of the Cloud Service Provider.",
                        "items": { "$ref": "#/components/schemas/Region" }
                    },
                    "description": { "type": "string", "description": "The description of the registered service." },
                    "icon": { "type": "string", "description": "The icon of the registered service." },
                    "deployment": { "$ref": "#/components/schemas/Deployment" },
                    "variables": {
                        "type": "array",
                        "description": "The variables for the deployment, which will be passed to the deployer.",
                        "items": { "$ref": "#/components/schemas/DeployVariable" }
                    },
                    "flavors": {
                        "type": "array",
                        "description": "The flavors of the registered service.",
                        "items": { "$ref": "#/components/schemas/Flavor" }
                    },
                    "billing": { "$ref": "#/components/schemas/Billing" },
                    "serviceHostingType": {
                        "type": "string",
                        "description": "Defines which cloud service account is used for deploying cloud resources.",
                        "enum": ["self", "service-vendor"]
                    },
                    "createTime": {
                        "type": "string",
                        "description": "createTime of the registered service.",
                        "format": "date-time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Last updateTime of the registered service.",
                        "format": "date-time"
                    },
                    "serviceRegistrationState": {
                        "type": "string",
                        "description": "State of registered service.",
                        "enum": ["registered", "updated"]
                    },
                    "serviceProviderContactDetails": { "$ref": "#/components/schemas/ServiceProviderContactDetails" },
                    "links": { "type": "array", "items": { "$ref": "#/components/schemas/Link" } }
                }
            },
            "ServicePolicyUpdateRequest": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": { "type": "string", "description": "The id of the policy.", "format": "uuid" },
                    "flavorNameList": {
                        "type": "array",
                        "description": "The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors.",
                        "items": {
                            "type": "string",
                            "description": "The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors."
                        }
                    },
                    "policy": { "type": "string", "description": "The policy." },
                    "enabled": {
                        "type": "boolean",
                        "description": "Is the policy enabled. true:enabled;false:disabled."
                    }
                }
            },
            "ServicePolicy": {
                "required": ["createTime", "enabled", "id", "lastModifiedTime", "policy", "serviceTemplateId"],
                "type": "object",
                "properties": {
                    "id": { "type": "string", "description": "The id of the policy.", "format": "uuid" },
                    "policy": { "type": "string", "description": "The valid policy belongs to the service." },
                    "serviceTemplateId": {
                        "type": "string",
                        "description": "The id of registered service template which the policy belongs to.",
                        "format": "uuid"
                    },
                    "flavorNameList": {
                        "type": "array",
                        "description": "The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors.",
                        "items": {
                            "type": "string",
                            "description": "The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors."
                        }
                    },
                    "enabled": { "type": "boolean", "description": "Is the policy enabled." },
                    "createTime": {
                        "type": "string",
                        "description": "Time of the policy created.",
                        "format": "date-time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Time of the policy updated.",
                        "format": "date-time"
                    }
                }
            },
            "UserPolicyUpdateRequest": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": { "type": "string", "description": "The id of the policy.", "format": "uuid" },
                    "csp": {
                        "type": "string",
                        "description": "The csp which the policy belongs to.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "scs", "alicloud", "aws", "azure", "google"]
                    },
                    "policy": { "type": "string", "description": "The policy." },
                    "enabled": {
                        "type": "boolean",
                        "description": "Is the policy enabled. true:enabled;false:disabled."
                    }
                }
            },
            "UserPolicy": {
                "required": ["createTime", "csp", "enabled", "id", "lastModifiedTime", "policy"],
                "type": "object",
                "properties": {
                    "id": { "type": "string", "description": "The id of the policy.", "format": "uuid" },
                    "policy": { "type": "string", "description": "The valid policy created by the user." },
                    "csp": {
                        "type": "string",
                        "description": "The csp which the policy belongs to.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "scs", "alicloud", "aws", "azure", "google"]
                    },
                    "enabled": { "type": "boolean", "description": "Is the policy enabled." },
                    "createTime": {
                        "type": "string",
                        "description": "Time of the policy created.",
                        "format": "date-time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Time of the policy updated.",
                        "format": "date-time"
                    }
                }
            },
            "DeployRequest": {
                "required": ["category", "csp", "flavor", "region", "serviceHostingType", "serviceName", "version"],
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "The category of the service",
                        "enum": [
                            "ai",
                            "compute",
                            "container",
                            "storage",
                            "network",
                            "database",
                            "mediaService",
                            "security",
                            "middleware",
                            "others"
                        ]
                    },
                    "serviceName": { "type": "string", "description": "The name of the service ordered." },
                    "customerServiceName": {
                        "type": "string",
                        "description": "Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated"
                    },
                    "version": { "type": "string", "description": "The version of service" },
                    "region": { "type": "string", "description": "The region of the provider." },
                    "csp": {
                        "type": "string",
                        "description": "The csp of the Service.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "scs", "alicloud", "aws", "azure", "google"]
                    },
                    "flavor": { "type": "string", "description": "The flavor of the Service." },
                    "serviceHostingType": {
                        "type": "string",
                        "description": "Defines which cloud service account is used for deploying cloud resources.",
                        "enum": ["self", "service-vendor"]
                    },
                    "serviceRequestProperties": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "The properties for the requested service"
                    }
                }
            },
            "MigrateRequest": {
                "required": [
                    "category",
                    "csp",
                    "flavor",
                    "id",
                    "region",
                    "serviceHostingType",
                    "serviceName",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "The category of the service",
                        "enum": [
                            "ai",
                            "compute",
                            "container",
                            "storage",
                            "network",
                            "database",
                            "mediaService",
                            "security",
                            "middleware",
                            "others"
                        ]
                    },
                    "serviceName": { "type": "string", "description": "The name of the service ordered." },
                    "customerServiceName": {
                        "type": "string",
                        "description": "Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated"
                    },
                    "version": { "type": "string", "description": "The version of service" },
                    "region": { "type": "string", "description": "The region of the provider." },
                    "csp": {
                        "type": "string",
                        "description": "The csp of the Service.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "scs", "alicloud", "aws", "azure", "google"]
                    },
                    "flavor": { "type": "string", "description": "The flavor of the Service." },
                    "serviceHostingType": {
                        "type": "string",
                        "description": "Defines which cloud service account is used for deploying cloud resources.",
                        "enum": ["self", "service-vendor"]
                    },
                    "serviceRequestProperties": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "The properties for the requested service"
                    },
                    "id": { "type": "string", "description": "The id of the service to migrate", "format": "uuid" }
                }
            },
            "ServicePolicyCreateRequest": {
                "required": ["enabled", "policy", "serviceTemplateId"],
                "type": "object",
                "properties": {
                    "serviceTemplateId": {
                        "type": "string",
                        "description": "The id of registered service template which the policy belongs to.",
                        "format": "uuid"
                    },
                    "flavorNameList": {
                        "type": "array",
                        "description": "The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors.",
                        "items": {
                            "type": "string",
                            "description": "The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors."
                        }
                    },
                    "policy": { "type": "string", "description": "The policy." },
                    "enabled": {
                        "type": "boolean",
                        "description": "Is the policy enabled. true:enabled;false:disabled."
                    }
                }
            },
            "UserPolicyCreateRequest": {
                "required": ["csp", "enabled", "policy"],
                "type": "object",
                "properties": {
                    "csp": {
                        "type": "string",
                        "description": "The csp which the policy belongs to.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "scs", "alicloud", "aws", "azure", "google"]
                    },
                    "policy": { "type": "string", "description": "The policy." },
                    "enabled": {
                        "type": "boolean",
                        "description": "Is the policy enabled. true:enabled;false:disabled."
                    }
                }
            },
            "OpenTofuResult": {
                "type": "object",
                "properties": {
                    "destroyScenario": { "type": "string", "enum": ["destroy", "rollback", "purge"] },
                    "commandStdOutput": { "type": "string" },
                    "commandStdError": { "type": "string" },
                    "terraformState": { "type": "string" },
                    "importantFileContentMap": { "type": "object", "additionalProperties": { "type": "string" } },
                    "commandSuccessful": { "type": "boolean" }
                }
            },
            "TerraformResult": {
                "type": "object",
                "properties": {
                    "destroyScenario": { "type": "string", "enum": ["destroy", "rollback", "purge"] },
                    "commandStdOutput": { "type": "string" },
                    "commandStdError": { "type": "string" },
                    "terraformState": { "type": "string" },
                    "importantFileContentMap": { "type": "object", "additionalProperties": { "type": "string" } },
                    "commandSuccessful": { "type": "boolean" }
                }
            },
            "WorkFlowTask": {
                "required": [
                    "businessKey",
                    "createTime",
                    "executionId",
                    "processDefinitionId",
                    "processDefinitionName",
                    "processInstanceId",
                    "status",
                    "taskId",
                    "taskName"
                ],
                "type": "object",
                "properties": {
                    "processInstanceId": { "type": "string", "description": "The id of the ProcessInstance" },
                    "processInstanceName": { "type": "string", "description": "The name of the ProcessInstance" },
                    "processDefinitionId": { "type": "string", "description": "The id of the ProcessDefinition" },
                    "processDefinitionName": { "type": "string", "description": "The name of the ProcessDefinition" },
                    "executionId": { "type": "string", "description": "The execution id of the ProcessInstance" },
                    "taskId": { "type": "string", "description": "The id of the task" },
                    "taskName": { "type": "string", "description": "The name of the task" },
                    "businessKey": { "type": "string", "description": "The businessKey of the Process" },
                    "status": { "type": "string", "description": "The status of the Task", "enum": ["done", "failed"] },
                    "createTime": {
                        "type": "string",
                        "description": "The create time of the task",
                        "format": "date-time"
                    }
                }
            },
            "AbstractCredentialInfo": {
                "required": ["csp", "description", "name", "type"],
                "type": "object",
                "allOf": [
                    { "$ref": "#/components/schemas/CredentialVariables" },
                    {
                        "type": "object",
                        "properties": {
                            "csp": {
                                "type": "string",
                                "description": "The cloud service provider of the credential.",
                                "enum": [
                                    "huawei",
                                    "flexibleEngine",
                                    "openstack",
                                    "scs",
                                    "alicloud",
                                    "aws",
                                    "azure",
                                    "google"
                                ]
                            },
                            "type": {
                                "type": "string",
                                "description": "The type of the credential, this field is provided by the plugin of cloud service provider.",
                                "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the credential, this field is provided by the plugin of cloud service provider. The value of this field must be unique between credentials with the same csp and type."
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the credential,this field is provided by the plugin of cloud service provider."
                            },
                            "userId": { "type": "string", "description": "The id of user who created the credential." }
                        }
                    }
                ]
            },
            "CredentialVariables": {
                "required": ["csp", "description", "name", "type", "variables"],
                "type": "object",
                "properties": {
                    "csp": {
                        "type": "string",
                        "description": "The cloud service provider of the credential.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "scs", "alicloud", "aws", "azure", "google"]
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the credential, this field is provided by the plugin of cloud service provider.",
                        "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the credential, this field is provided by the plugin of cloud service provider. The value of this field must be unique between credentials with the same csp and type."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the credential,this field is provided by the plugin of cloud service provider."
                    },
                    "userId": { "type": "string", "description": "The id of user who created the credential." },
                    "variables": {
                        "type": "array",
                        "description": "The variables list of the credential.",
                        "items": { "$ref": "#/components/schemas/CredentialVariable" }
                    }
                }
            },
            "ServiceMigrationDetails": {
                "required": [
                    "createTime",
                    "lastModifiedTime",
                    "migrationId",
                    "migrationStatus",
                    "newServiceId",
                    "oldServiceId"
                ],
                "type": "object",
                "properties": {
                    "migrationId": {
                        "type": "string",
                        "description": "The ID of the service migration",
                        "format": "uuid"
                    },
                    "oldServiceId": { "type": "string", "description": "The ID of the old service", "format": "uuid" },
                    "newServiceId": { "type": "string", "description": "The ID of the new service", "format": "uuid" },
                    "migrationStatus": {
                        "type": "string",
                        "description": "The status of the service migration",
                        "enum": [
                            "MigrationStarted",
                            "MigrationCompleted",
                            "MigrationFailed",
                            "DataExportStarted",
                            "DataExportFailed",
                            "DataExportCompleted",
                            "DeployStarted",
                            "DeployFailed",
                            "DeployCompleted",
                            "DataImportStarted",
                            "DataImportFailed",
                            "DataImportCompleted",
                            "DestroyStarted",
                            "DestroyFailed",
                            "DestroyCompleted"
                        ]
                    },
                    "createTime": {
                        "type": "string",
                        "description": "Time of service migration.",
                        "format": "date-time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Time of update service migration.",
                        "format": "date-time"
                    }
                }
            },
            "DeployResource": {
                "required": ["kind", "name", "properties", "resourceId"],
                "type": "object",
                "properties": {
                    "resourceId": { "type": "string", "description": "The id of the deployed resource." },
                    "name": { "type": "string", "description": "The name of the deployed resource." },
                    "kind": {
                        "type": "string",
                        "description": "The kind of the deployed resource.",
                        "enum": [
                            "vm",
                            "container",
                            "publicIP",
                            "vpc",
                            "volume",
                            "unknown",
                            "security_group",
                            "security_group_rule",
                            "keypair",
                            "subnet"
                        ]
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The properties of the deployed resource."
                        },
                        "description": "The properties of the deployed resource."
                    }
                },
                "description": "The resource list of the deployed service."
            },
            "DeployedServiceDetails": {
                "required": [
                    "category",
                    "createTime",
                    "csp",
                    "deployRequest",
                    "id",
                    "lastModifiedTime",
                    "name",
                    "serviceDeploymentState",
                    "serviceHostingType",
                    "serviceState",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "id": { "type": "string", "description": "The ID of the service", "format": "uuid" },
                    "category": {
                        "type": "string",
                        "description": "The catalog of the service",
                        "enum": [
                            "ai",
                            "compute",
                            "container",
                            "storage",
                            "network",
                            "database",
                            "mediaService",
                            "security",
                            "middleware",
                            "others"
                        ]
                    },
                    "name": { "type": "string", "description": "The name of the service" },
                    "customerServiceName": {
                        "type": "string",
                        "description": "Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated"
                    },
                    "version": { "type": "string", "description": "The version of the service" },
                    "csp": {
                        "type": "string",
                        "description": "The provider of the service",
                        "enum": ["huawei", "flexibleEngine", "openstack", "scs", "alicloud", "aws", "azure", "google"]
                    },
                    "flavor": { "type": "string", "description": "The flavor of the service" },
                    "serviceTemplateId": {
                        "type": "string",
                        "description": "The id of the Service Template",
                        "format": "uuid"
                    },
                    "serviceDeploymentState": {
                        "type": "string",
                        "description": "The deployment state of the service",
                        "enum": [
                            "deploying",
                            "deployment successful",
                            "deployment failed",
                            "destroying",
                            "destroy successful",
                            "destroy failed",
                            "migrating",
                            "migration successful",
                            "migration failed",
                            "manual cleanup required",
                            "rollback failed"
                        ]
                    },
                    "serviceState": {
                        "type": "string",
                        "description": "The run state of the service",
                        "enum": [
                            "not running",
                            "running",
                            "starting",
                            "starting failed",
                            "stopping",
                            "stopped",
                            "stopping failed"
                        ]
                    },
                    "serviceHostingType": {
                        "type": "string",
                        "description": "Defines which cloud service account is used for deploying cloud resources.",
                        "enum": ["self", "service-vendor"]
                    },
                    "createTime": {
                        "type": "string",
                        "description": "Time of register service.",
                        "format": "date-time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Time of update service.",
                        "format": "date-time"
                    },
                    "lastStartedAt": {
                        "type": "string",
                        "description": "Time of start service.",
                        "format": "date-time"
                    },
                    "lastStoppedAt": {
                        "type": "string",
                        "description": "Time of stop service.",
                        "format": "date-time"
                    },
                    "deployRequest": { "$ref": "#/components/schemas/DeployRequest" },
                    "deployResources": {
                        "type": "array",
                        "description": "The resource list of the deployed service.",
                        "items": { "$ref": "#/components/schemas/DeployResource" }
                    },
                    "deployedServiceProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The properties of the deployed service."
                        },
                        "description": "The properties of the deployed service."
                    },
                    "resultMessage": { "type": "string", "description": "The result message of the deployed service." }
                }
            },
            "VendorHostedDeployedServiceDetails": {
                "required": [
                    "category",
                    "createTime",
                    "csp",
                    "deployRequest",
                    "id",
                    "lastModifiedTime",
                    "name",
                    "serviceDeploymentState",
                    "serviceHostingType",
                    "serviceState",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "id": { "type": "string", "description": "The ID of the service", "format": "uuid" },
                    "category": {
                        "type": "string",
                        "description": "The catalog of the service",
                        "enum": [
                            "ai",
                            "compute",
                            "container",
                            "storage",
                            "network",
                            "database",
                            "mediaService",
                            "security",
                            "middleware",
                            "others"
                        ]
                    },
                    "name": { "type": "string", "description": "The name of the service" },
                    "customerServiceName": {
                        "type": "string",
                        "description": "Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated"
                    },
                    "version": { "type": "string", "description": "The version of the service" },
                    "csp": {
                        "type": "string",
                        "description": "The provider of the service",
                        "enum": ["huawei", "flexibleEngine", "openstack", "scs", "alicloud", "aws", "azure", "google"]
                    },
                    "flavor": { "type": "string", "description": "The flavor of the service" },
                    "serviceTemplateId": {
                        "type": "string",
                        "description": "The id of the Service Template",
                        "format": "uuid"
                    },
                    "serviceDeploymentState": {
                        "type": "string",
                        "description": "The deployment state of the service",
                        "enum": [
                            "deploying",
                            "deployment successful",
                            "deployment failed",
                            "destroying",
                            "destroy successful",
                            "destroy failed",
                            "migrating",
                            "migration successful",
                            "migration failed",
                            "manual cleanup required",
                            "rollback failed"
                        ]
                    },
                    "serviceState": {
                        "type": "string",
                        "description": "The run state of the service",
                        "enum": [
                            "not running",
                            "running",
                            "starting",
                            "starting failed",
                            "stopping",
                            "stopped",
                            "stopping failed"
                        ]
                    },
                    "serviceHostingType": {
                        "type": "string",
                        "description": "Defines which cloud service account is used for deploying cloud resources.",
                        "enum": ["self", "service-vendor"]
                    },
                    "createTime": {
                        "type": "string",
                        "description": "Time of register service.",
                        "format": "date-time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Time of update service.",
                        "format": "date-time"
                    },
                    "lastStartedAt": {
                        "type": "string",
                        "description": "Time of start service.",
                        "format": "date-time"
                    },
                    "lastStoppedAt": {
                        "type": "string",
                        "description": "Time of stop service.",
                        "format": "date-time"
                    },
                    "deployRequest": { "$ref": "#/components/schemas/DeployRequest" },
                    "deployedServiceProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The properties of the deployed service."
                        },
                        "description": "The properties of the deployed service."
                    }
                }
            },
            "Metric": {
                "required": ["monitorResourceType", "name", "type", "unit"],
                "type": "object",
                "properties": {
                    "name": { "type": "string", "description": "The name of the metric." },
                    "description": { "type": "string", "description": "The description of the metric." },
                    "type": {
                        "type": "string",
                        "description": "The type of the metric.",
                        "enum": ["counter", "gauge", "histogram", "summary"]
                    },
                    "monitorResourceType": {
                        "type": "string",
                        "description": "The resource type of the metric.",
                        "enum": ["cpu", "mem", "vm_network_incoming", "vm_network_outgoing"]
                    },
                    "unit": {
                        "type": "string",
                        "description": "The unit of the metric.",
                        "enum": ["mb", "kb", "percentage", "bit/s", "Byte/s"]
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": { "type": "string", "description": "The labels of the metric." },
                        "description": "The labels of the metric."
                    },
                    "metrics": {
                        "type": "array",
                        "description": "The list of the metric items.",
                        "items": { "$ref": "#/components/schemas/MetricItem" }
                    }
                }
            },
            "MetricItem": {
                "required": ["timeStamp", "type", "value"],
                "type": "object",
                "properties": {
                    "labels": {
                        "type": "object",
                        "additionalProperties": { "type": "string", "description": "The labels for the MetricItem." },
                        "description": "The labels for the MetricItem."
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the MetricItem.",
                        "enum": ["value", "count", "sum"]
                    },
                    "timeStamp": {
                        "type": "integer",
                        "description": "Timestamp of the recorded metric.",
                        "format": "int64"
                    },
                    "value": { "type": "number", "description": "value of the MetricItem." }
                },
                "description": "The list of the metric items."
            },
            "BackendSystemStatus": {
                "required": ["backendSystemType", "healthStatus", "name"],
                "type": "object",
                "properties": {
                    "backendSystemType": {
                        "type": "string",
                        "description": "The type of backend system.",
                        "enum": [
                            "IdentityProvider",
                            "Database",
                            "Terraform Boot",
                            "Tofu Maker",
                            "PolicyMan",
                            "OpenTelemetry Collector"
                        ]
                    },
                    "name": { "type": "string", "description": "The name of backend system." },
                    "healthStatus": {
                        "type": "string",
                        "description": "The health status of backend system.",
                        "enum": ["OK", "NOK"]
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of backend system. This filed is shown when the user have role 'admin' otherwise it is null."
                    },
                    "details": {
                        "type": "string",
                        "description": "The details why health is not ok.This filed is shown when the user have role 'admin' otherwise it is null."
                    }
                },
                "description": "The health status of backend systems. This list contains status of identity provider and status of database.The status of identity provider will return when authorization is enabled."
            },
            "SystemStatus": {
                "required": ["backendSystemStatuses", "healthStatus"],
                "type": "object",
                "properties": {
                    "healthStatus": {
                        "type": "string",
                        "description": "The health status of Xpanse api service.",
                        "enum": ["OK", "NOK"]
                    },
                    "backendSystemStatuses": {
                        "type": "array",
                        "description": "The health status of backend systems. This list contains status of identity provider and status of database.The status of identity provider will return when authorization is enabled.",
                        "items": { "$ref": "#/components/schemas/BackendSystemStatus" }
                    }
                }
            },
            "FlavorBasic": {
                "required": ["fixedPrice", "name"],
                "type": "object",
                "properties": {
                    "name": { "type": "string", "description": "The flavor name" },
                    "fixedPrice": { "type": "integer", "description": "The price of the flavor", "format": "int32" }
                },
                "description": "The flavors of the orderable service."
            },
            "UserOrderableServiceVo": {
                "required": [
                    "billing",
                    "category",
                    "csp",
                    "description",
                    "flavors",
                    "icon",
                    "id",
                    "name",
                    "regions",
                    "serviceHostingType",
                    "serviceProviderContactDetails",
                    "variables",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "id": { "type": "string", "description": "The id of the orderable service.", "format": "uuid" },
                    "category": {
                        "type": "string",
                        "description": "The category of the orderable service.",
                        "enum": [
                            "ai",
                            "compute",
                            "container",
                            "storage",
                            "network",
                            "database",
                            "mediaService",
                            "security",
                            "middleware",
                            "others"
                        ]
                    },
                    "name": { "type": "string", "description": "The name of the orderable service." },
                    "version": { "type": "string", "description": "The version of the orderable service." },
                    "csp": {
                        "type": "string",
                        "description": "The Cloud Service Provider of the orderable service.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "scs", "alicloud", "aws", "azure", "google"]
                    },
                    "regions": {
                        "type": "array",
                        "description": "The regions of the Cloud Service Provider.",
                        "items": { "$ref": "#/components/schemas/Region" }
                    },
                    "description": { "type": "string", "description": "The description of the orderable service." },
                    "icon": { "type": "string", "description": "The icon of the orderable service." },
                    "variables": {
                        "type": "array",
                        "description": "The variables for the deployment, which will be passed to the deployer.",
                        "items": { "$ref": "#/components/schemas/DeployVariable" }
                    },
                    "flavors": {
                        "type": "array",
                        "description": "The flavors of the orderable service.",
                        "items": { "$ref": "#/components/schemas/FlavorBasic" }
                    },
                    "billing": { "$ref": "#/components/schemas/Billing" },
                    "serviceHostingType": {
                        "type": "string",
                        "description": "Defines which cloud service account is used for deploying cloud resources.",
                        "enum": ["self", "service-vendor"]
                    },
                    "serviceProviderContactDetails": { "$ref": "#/components/schemas/ServiceProviderContactDetails" },
                    "links": { "type": "array", "items": { "$ref": "#/components/schemas/Link" } }
                }
            },
            "TokenResponse": {
                "required": ["access_token", "expires_in", "id_token", "token_type"],
                "type": "object",
                "properties": {
                    "access_token": { "type": "string", "description": "An access_token as a JWT or opaque token." },
                    "token_type": { "type": "string", "description": "Type of the access_token." },
                    "expires_in": {
                        "type": "string",
                        "description": "Number of second until the expiration of the access_token"
                    },
                    "id_token": { "type": "string", "description": "An id_token of the authorized service user" },
                    "scopes": { "type": "string", "description": "Scopes of the access_token." }
                }
            }
        },
        "securitySchemes": {
            "OAuth2Flow": {
                "type": "oauth2",
                "flows": {
                    "authorizationCode": {
                        "authorizationUrl": "https://iam.xpanse.site/oauth/v2/authorize",
                        "tokenUrl": "https://iam.xpanse.site/oauth/v2/token",
                        "scopes": {
                            "openid": "mandatory must be selected.",
                            "profile": "mandatory must be selected.",
                            "urn:zitadel:iam:org:project:roles": "mandatory must be selected.",
                            "urn:zitadel:iam:user:metadata": "mandatory must be selected."
                        }
                    }
                }
            }
        }
    }
}
